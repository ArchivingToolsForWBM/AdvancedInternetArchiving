If Links are not in the HTML itself but is inside a JS code that writes the link into a clipboard (that probably social media sites do for links to the posts), I would strongly recommend monkey-patch this:

	navigator.clipboard.writeText = async function(data) {
		console.log(data);
	}

This overrides JS from writing directly to the clipboard to instead the console log.

However, if you want to go full-automation, beware that the clipboard API requires the document to be focused, so this:

	document.getElementsByTagName("button")[<number>].click()

must be this instead:

	if (document.hasFocus()) {
		//<some other code here>
		document.getElementsByTagName("button")[<number>].click()
	}

To get an element that has a specified string (regex), use this (this gets the element that lacks any inner elements/children). NOTE: returns a shallow copied array from the live HTMLcollection:

	//Credit: https://stackoverflow.com/a/45089849/11030779
	//I edited to make it match via regex
	//
	//ObjReference = object reference to search for an element. Have "document" (identifier, not a string) to search the whole document
	//RegexText = Regular expression to match
	//Tag = HTML tag name to search by. "*" means to search any.
	function getElementsByText(ObjReference, RegexText, Tag) {
		return Array.prototype.slice.call(ObjReference.getElementsByTagName(Tag)).filter(el => RegexText.test(el.textContent.trim())).filter((el) => (el.children.length == 0)&&(el.tagName != "SCRIPT"));
	}